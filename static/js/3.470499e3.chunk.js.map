{"version":3,"sources":["Layout/Section.jsx","Layout/Section.module.css","components/ContactsList/ContactsList.module.css","components/ContactModal/ContactModal.module.css","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/ContactModal/ContactModal.js","Views/ContactsView.js"],"names":["Section","children","title","className","s","section","module","exports","getContacts","state","contacts","item","getIsLoading","isLoading","getFilter","filter","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","getIsAdded","map","ContactsForm","useState","setName","number","setNumber","isAdded","useSelector","dispatch","useDispatch","handleSubmit","e","preventDefault","alert","a","contactsActions","addContactsRequest","infoNotify","axios","post","data","addContactsSuccess","addContactsError","massage","warnNotify","message","addContact","onSubmit","type","id","value","placeholder","onChange","target","htmlFor","disabled","ContactsList","onOpenModal","filterContacts","nameText","button","onClick","size","deleteContactsRequest","delete","deleteContactsSuccess","deleteContactsError","deleteContacts","Filter","style","marginBottom","changeFilter","ContactModal","contactData","onCloseModal","useEffect","handlePressEsc","code","window","addEventListener","removeEventListener","overlay","currentTarget","handleBackDropClick","modal","close","closeIcon","form","updateContact","update","editContactsRequest","patch","console","log","editContactsSuccess","editContactsError","editContacts","ContactsView","isOpenModal","setIsOpenModal","editContact","setEditContact","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","display","justifyContent","color","height","width","length"],"mappings":"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","file":"static/js/3.470499e3.chunk.js","sourcesContent":["import propTypes from 'prop-types';\nimport s from './Section.module.css';\n\nexport default function Section({ children, title }) {\n  return (\n    <section className={s.section}>\n      {title ? <h2 className={s.title}>{title}</h2> : null}\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: propTypes.string,\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__6xXfv\",\"title\":\"Section_title__1YKbp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactsList_item__363Az\",\"nameText\":\"ContactsList_nameText__2SCUi\",\"button\":\"ContactsList_button__2U2V4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"ContactModal_overlay__cFKIw\",\"modal\":\"ContactModal_modal__1ng94\",\"controls\":\"ContactModal_controls__FO6jr\",\"close\":\"ContactModal_close__fYeDk\",\"closeIcon\":\"ContactModal_closeIcon__3zymV\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.item;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    ),\n);\n\nexport const getIsAdded = createSelector([getContacts], contacts => {\n  const isAdded = name => contacts.map(contact => contact.name).includes(name);\n  return isAdded;\n});","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getIsAdded } from '../../redux/contacts/contacts-selectors';\n\nexport default function ContactsForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const isAdded = useSelector(getIsAdded);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (isAdded(name)) {\n      return alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact(name, number));\n    }\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <form className=\"form\" onSubmit={e => handleSubmit(e)}>\n        <div className=\"inputWrapper\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            value={name}\n            placeholder=\"имя\"\n            onChange={e => setName(e.target.value)}\n          />\n          <label\n            className={name ? 'labelRight' : 'label'}\n            htmlFor=\"name\"\n          ></label>\n        </div>\n        <div className=\"inputWrapper\">\n          <label\n            className={number ? 'labelRight' : 'label'}\n            htmlFor=\"phone\"\n          ></label>\n          <input\n            className=\"input\"\n            type=\"tel\"\n            name=\"number\"\n            id=\"number\"\n            value={number}\n            placeholder=\"Номер телефона\"\n            onChange={e => setNumber(e.target.value)}\n          />\n        </div>\n        <button className=\"button\" type=\"submit\" disabled={!(name && number)}>\n          Добавить\n        </button>\n      </form>\n    </>\n  );\n}\n\nContactsForm.propTypes = {\n  onAddContacts: propTypes.func,\n};","import axios from 'axios';\nimport contactsActions from './contacts-actions';\nimport { infoNotify, warnNotify } from '../../services/tostify';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(contactsActions.fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(contactsActions.fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.fetchContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};\n\nexport const addContact = (name, number) => async dispatch => {\n  const contact = { name, number };\n  dispatch(contactsActions.addContactsRequest());\n  infoNotify('Запись добавлена');\n\n  try {\n    const { data } = await axios.post('/contacts', contact);\n\n    dispatch(contactsActions.addContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.addContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};\n\nexport const deleteContacts = id => async dispatch => {\n  dispatch(contactsActions.deleteContactsRequest());\n\n  try {\n    await axios.delete(`/contacts/${id}`);\n\n    dispatch(contactsActions.deleteContactsSuccess(id));\n  } catch (error) {\n    dispatch(contactsActions.deleteContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};\n\nexport const editContacts = (id, update) => async dispatch => {\n  dispatch(contactsActions.editContactsRequest());\n\n  try {\n    const { data } = await axios.patch(`/contacts/${id}`, update);\n    console.log(data);\n    dispatch(contactsActions.editContactsSuccess(data));\n  } catch (error) {\n    dispatch(contactsActions.editContactsError(error.massage));\n    warnNotify(error.message);\n  }\n};","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  deleteContacts,\n  // editContacts,\n} from '../../redux/contacts/contacts-operations';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport propTypes from 'prop-types';\nimport s from './ContactsList.module.css';\nimport { FaUserEdit, FaTrashAlt } from 'react-icons/fa';\n\nexport default function ContactsList({ onOpenModal }) {\n  const filterContacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <ul>\n        {filterContacts.map(({ id, name, number }) => (\n          <li className={s.item} key={id}>\n            <p className={s.nameText}>\n              {name}: <span>{number}</span>\n            </p>\n            <div>\n              <button\n                className={s.button}\n                type=\"button\"\n                onClick={() => onOpenModal({ name, number }, id)}\n              >\n                <FaUserEdit size=\"20\" />\n              </button>\n              <button\n                className={s.button}\n                type=\"button\"\n                onClick={() => dispatch(deleteContacts(id))}\n              >\n                <FaTrashAlt size=\"20\" className={s.delete} />\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nContactsList.propTypes = {\n  onDeleteBtn: propTypes.func,\n  contacts: propTypes.arrayOf(\n    propTypes.exact({\n      id: propTypes.string,\n      name: propTypes.string,\n      number: propTypes.string,\n    }),\n  ),\n};","import { useSelector, useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nexport default function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <form className=\"form\">\n      <div className=\"inputWrapper\">\n        <label\n          className=\"label\"\n          name=\"filter\"\n          htmlFor=\"filter\"\n          value={filter}\n        ></label>\n        <input\n          style={{ marginBottom: '30px' }}\n          className=\"input\"\n          value={filter}\n          type=\"text\"\n          id=\"filter\"\n          placeholder=\"найти контакт по имени\"\n          onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n        />\n      </div>\n    </form>\n  );\n}","import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editContacts } from '../../redux/contacts/contacts-operations';\nimport s from './ContactModal.module.css';\nimport { FaRegWindowClose } from 'react-icons/fa';\n\nexport default function ContactModal({ contactData, onCloseModal }) {\n  const { contact, id } = contactData;\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const handlePressEsc = e => {\n      if (e.code === 'Escape') {\n        onCloseModal(false);\n      }\n    };\n\n    window.addEventListener('keydown', handlePressEsc);\n    return () => {\n      window.removeEventListener('keydown', handlePressEsc);\n    };\n  });\n\n  const handleBackDropClick = e => {\n    if (e.currentTarget === e.target) {\n      onCloseModal();\n    }\n  };\n\n  const handleSave = () => {\n    const updateContact = {\n      name: name ? name : contact.name,\n      number: number ? number : contact.number,\n    };\n    dispatch(editContacts(id, updateContact));\n    onCloseModal(false);\n  };\n\n  return (\n    <div className={s.overlay} onClick={e => handleBackDropClick(e)}>\n      <div className={s.modal}>\n        <button\n          className={s.close}\n          type=\"button\"\n          onClick={() => onCloseModal(false)}\n        >\n          <FaRegWindowClose size=\"30\" className={s.closeIcon} />\n        </button>\n        <form className={s.form}>\n          <div className=\"inputWrapper\">\n            <label htmlFor=\"editName\"></label>\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"name\"\n              id=\"editName\"\n              value={name}\n              placeholder={contact.name}\n              onChange={({ target: { value } }) => setName(value)}\n            />\n          </div>\n          <div className=\"inputWrapper\">\n            <label htmlFor=\"editNumber\"></label>\n            <input\n              className=\"input\"\n              type=\"tel\"\n              name=\"number\"\n              id=\"editNamber\"\n              value={number}\n              placeholder={contact.number}\n              onChange={({ target: { value } }) => setNumber(value)}\n            />\n          </div>\n\n          <button className=\"button\" type=\"button\" onClick={handleSave}>\n            Сохранить\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/contacts-operations';\nimport {\n  getContacts,\n  getIsLoading,\n} from '../redux/contacts/contacts-selectors';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport Loader from 'react-loader-spinner';\nimport Section from '../Layout/Section';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactsList from '../components/ContactsList/ContactsList';\nimport Filter from '../components/Filter/Filter';\nimport ContactModal from '../components/ContactModal/ContactModal';\n\nexport default function ContactsView() {\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const dispatch = useDispatch();\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [editContact, setEditContact] = useState({});\n\n  const handleOpenModal = (contact, id) => {\n    setIsOpenModal(true);\n    setEditContact({ contact, id });\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Section title=\"Введите имя и номер\">\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        {isLoading ? (\n          <Loader type=\"Rings\" color=\"#00BFFF\" height={80} width={80} />\n        ) : null}\n      </div>\n\n      <ContactForm />\n\n      {contacts.length ? (\n        <Section title=\"Контакты\">\n          <Filter />\n          <ContactsList onOpenModal={handleOpenModal} />\n          {isOpenModal && (\n            <ContactModal\n              onCloseModal={setIsOpenModal}\n              contactData={editContact}\n            />\n          )}\n        </Section>\n      ) : null}\n    </Section>\n  );\n}"],"sourceRoot":""}